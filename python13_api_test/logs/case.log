2019-02-24 22:46:02,355-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'status': 0, 'msg': '借款金额
amount 必须为 大于 1000 并能被 100 整除的正整数 '}，
实际结果是：{'code': '10001', 'status': 1, 'data': None, 'msg': '加标成功'}  -[test_E_add.py:47]
2019-02-25 12:04:21,473-add-ERROR-:执行失败！期望结果是：{'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0, 'code': '20106'}，实际结果是：{'data': None, 'msg': '加标成功', 'status': 1, 'code': '10001'}  -[test_E_add.py:47]
2019-02-25 12:04:24,629-audit-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'data': None, 'msg': '修改失败，当前标已经是该状态', 'status': 0, 'code': '20207'}  -[test_F_audit.py:58]
2019-02-25 12:19:48,394-add-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 '}，实际结果是：{'status': 1, 'code': '10001', 'msg': '加标成功', 'data': None}  -[test_E_add.py:47]
2019-02-25 12:19:51,456-audit-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'status': 0, 'code': '20207', 'msg': '修改失败，当前标已经是该状态', 'data': None}  -[test_F_audit.py:58]
2019-02-25 12:23:23,092-add-ERROR-:执行失败！期望结果是：{'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0, 'code': '20106'}，实际结果是：{'msg': '加标成功', 'data': None, 'status': 1, 'code': '10001'}  -[test_E_add.py:47]
2019-02-25 12:23:33,826-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'data': None, 'status': 1, 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-25 12:23:34,076-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'data': None, 'status': 1, 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-25 12:23:34,232-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'data': None, 'status': 1, 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-25 12:44:00,946-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0}，实际结果是：{'code': '10001', 'msg': '加标成功', 'data': None, 'status': 1}  -[test_E_add.py:47]
2019-02-25 12:44:06,946-audit-ERROR-:执行失败！期望结果是：{'code': '10001', 'msg': '生成回款计划成功', 'status': 1}，实际结果是：{'code': '20402', 'msg': "\n### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3\n### The error may involve com.lemon.futureloan.dao.RepaymentMapper.batchAdd-Inline\n### The error occurred while setting parameters\n### SQL: insert into repayment(InvestId,CreateTime,Terms,UnfinishedPrincipal,   UnfinishedInterest,RepaymentDate,ActualRepaymentDate,Status)   values\n### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3\n; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3", 'data': None, 'status': 0}  -[test_F_audit.py:58]
2019-02-25 12:44:07,180-audit-ERROR-:执行失败！期望结果是：{'code': '20207', 'msg': '修改失败，当前标已经是该状态', 'data': None, 'status': 0}，实际结果是：{'code': '20210', 'msg': '不允许直接更新项目到还款中状态，请执行生成回款计划', 'data': None, 'status': 0}  -[test_F_audit.py:58]
2019-02-25 12:46:07,516-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0}，实际结果是：{'code': '10001', 'data': None, 'msg': '加标成功', 'status': 1}  -[test_E_add.py:47]
2019-02-25 12:46:13,531-audit-ERROR-:执行失败！期望结果是：{'code': '10001', 'msg': '生成回款计划成功', 'status': 1}，实际结果是：{'code': '20402', 'data': None, 'msg': "\n### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3\n### The error may involve com.lemon.futureloan.dao.RepaymentMapper.batchAdd-Inline\n### The error occurred while setting parameters\n### SQL: insert into repayment(InvestId,CreateTime,Terms,UnfinishedPrincipal,   UnfinishedInterest,RepaymentDate,ActualRepaymentDate,Status)   values\n### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3\n; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3", 'status': 0}  -[test_F_audit.py:58]
2019-02-25 12:46:13,718-audit-ERROR-:执行失败！期望结果是：{'code': '20207', 'data': None, 'msg': '修改失败，当前标已经是该状态', 'status': 0}，实际结果是：{'code': '20210', 'data': None, 'msg': '不允许直接更新项目到还款中状态，请执行生成回款计划', 'status': 0}  -[test_F_audit.py:58]
2019-02-25 12:47:48,254-add-ERROR-:执行失败！期望结果是：{'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106', 'status': 0}，实际结果是：{'msg': '加标成功', 'code': '10001', 'data': None, 'status': 1}  -[test_E_add.py:47]
2019-02-25 12:47:54,144-audit-ERROR-:执行失败！期望结果是：{'msg': '生成回款计划成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': "\n### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3\n### The error may involve com.lemon.futureloan.dao.RepaymentMapper.batchAdd-Inline\n### The error occurred while setting parameters\n### SQL: insert into repayment(InvestId,CreateTime,Terms,UnfinishedPrincipal,   UnfinishedInterest,RepaymentDate,ActualRepaymentDate,Status)   values\n### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3\n; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3", 'code': '20402', 'data': None, 'status': 0}  -[test_F_audit.py:58]
2019-02-25 12:47:54,316-audit-ERROR-:执行失败！期望结果是：{'msg': '修改失败，当前标已经是该状态', 'code': '20207', 'data': None, 'status': 0}，实际结果是：{'msg': '不允许直接更新项目到还款中状态，请执行生成回款计划', 'code': '20210', 'data': None, 'status': 0}  -[test_F_audit.py:58]
2019-02-25 12:49:35,403-add-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 '}，实际结果是：{'status': 1, 'data': None, 'code': '10001', 'msg': '加标成功'}  -[test_E_add.py:47]
2019-02-25 12:49:41,231-audit-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '生成回款计划成功'}，实际结果是：{'status': 0, 'data': None, 'code': '20402', 'msg': "\n### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3\n### The error may involve com.lemon.futureloan.dao.RepaymentMapper.batchAdd-Inline\n### The error occurred while setting parameters\n### SQL: insert into repayment(InvestId,CreateTime,Terms,UnfinishedPrincipal,   UnfinishedInterest,RepaymentDate,ActualRepaymentDate,Status)   values\n### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3\n; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3"}  -[test_F_audit.py:58]
2019-02-25 12:49:41,403-audit-ERROR-:执行失败！期望结果是：{'status': 0, 'data': None, 'code': '20207', 'msg': '修改失败，当前标已经是该状态'}，实际结果是：{'status': 0, 'data': None, 'code': '20210', 'msg': '不允许直接更新项目到还款中状态，请执行生成回款计划'}  -[test_F_audit.py:58]
2019-02-25 12:50:44,117-audit-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20205', 'msg': '非法 status 参数，状态值 1-11'}，实际结果是：{'status': 0, 'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空'}  -[test_F_audit.py:58]
2019-02-25 12:50:44,336-audit-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'status': 0, 'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空'}  -[test_F_audit.py:58]
2019-02-25 12:50:44,523-audit-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'status': 0, 'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空'}  -[test_F_audit.py:58]
2019-02-25 12:50:44,711-audit-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'status': 0, 'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空'}  -[test_F_audit.py:58]
2019-02-25 12:50:44,898-audit-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'status': 0, 'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空'}  -[test_F_audit.py:58]
2019-02-25 12:50:45,117-audit-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'status': 0, 'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空'}  -[test_F_audit.py:58]
2019-02-25 12:50:45,289-audit-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20210'}，实际结果是：{'status': 0, 'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空'}  -[test_F_audit.py:58]
2019-02-25 12:50:45,476-audit-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'status': 0, 'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空'}  -[test_F_audit.py:58]
2019-02-25 12:50:45,711-audit-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '生成回款计划成功'}，实际结果是：{'status': 1, 'code': '20403', 'data': None, 'msg': '所有参数不能为空'}  -[test_F_audit.py:58]
2019-02-25 12:50:45,945-audit-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20207', 'data': None, 'msg': '修改失败，当前标已经是该状态'}，实际结果是：{'status': 0, 'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空'}  -[test_F_audit.py:58]
2019-02-25 12:50:46,226-audit-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20211'}，实际结果是：{'status': 0, 'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空'}  -[test_F_audit.py:58]
2019-02-25 12:50:46,414-audit-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20211'}，实际结果是：{'status': 0, 'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空'}  -[test_F_audit.py:58]
2019-02-25 12:50:46,586-audit-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20211'}，实际结果是：{'status': 0, 'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空'}  -[test_F_audit.py:58]
2019-02-25 12:50:46,773-audit-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20211'}，实际结果是：{'status': 0, 'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空'}  -[test_F_audit.py:58]
2019-02-25 12:50:52,195-audit-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '生成回款计划成功'}，实际结果是：{'data': None, 'code': '20402', 'status': 0, 'msg': "\n### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3\n### The error may involve com.lemon.futureloan.dao.RepaymentMapper.batchAdd-Inline\n### The error occurred while setting parameters\n### SQL: insert into repayment(InvestId,CreateTime,Terms,UnfinishedPrincipal,   UnfinishedInterest,RepaymentDate,ActualRepaymentDate,Status)   values\n### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3\n; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3"}  -[test_F_audit.py:58]
2019-02-25 12:50:52,366-audit-ERROR-:执行失败！期望结果是：{'data': None, 'code': '20207', 'status': 0, 'msg': '修改失败，当前标已经是该状态'}，实际结果是：{'data': None, 'code': '20210', 'status': 0, 'msg': '不允许直接更新项目到还款中状态，请执行生成回款计划'}  -[test_F_audit.py:58]
2019-02-25 12:52:12,736-audit-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1}，实际结果是：{'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空', 'status': 0}  -[test_F_audit.py:53]
2019-02-25 12:52:12,923-audit-ERROR-:执行失败！期望结果是：{'code': '20207', 'status': 0}，实际结果是：{'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空', 'status': 0}  -[test_F_audit.py:53]
2019-02-25 12:52:13,658-audit-ERROR-:执行失败！期望结果是：{'code': '20205', 'msg': '非法 status 参数，状态值 1-11', 'status': 0}，实际结果是：{'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空', 'status': 0}  -[test_F_audit.py:53]
2019-02-25 12:52:13,845-audit-ERROR-:执行失败！期望结果是：{'code': '20205', 'msg': '非法 status 参数，状态值 1-11', 'status': 0}，实际结果是：{'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空', 'status': 0}  -[test_F_audit.py:53]
2019-02-25 12:52:14,033-audit-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1}，实际结果是：{'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空', 'status': 0}  -[test_F_audit.py:53]
2019-02-25 12:52:14,220-audit-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1}，实际结果是：{'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空', 'status': 0}  -[test_F_audit.py:53]
2019-02-25 12:52:14,407-audit-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1}，实际结果是：{'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空', 'status': 0}  -[test_F_audit.py:53]
2019-02-25 12:52:14,626-audit-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1}，实际结果是：{'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空', 'status': 0}  -[test_F_audit.py:53]
2019-02-25 12:52:14,829-audit-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1}，实际结果是：{'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空', 'status': 0}  -[test_F_audit.py:53]
2019-02-25 12:52:15,001-audit-ERROR-:执行失败！期望结果是：{'code': '20210', 'status': 0}，实际结果是：{'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空', 'status': 0}  -[test_F_audit.py:53]
2019-02-25 12:52:15,173-audit-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1}，实际结果是：{'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空', 'status': 0}  -[test_F_audit.py:53]
2019-02-25 12:52:15,361-audit-ERROR-:执行失败！期望结果是：{'code': '10001', 'msg': '生成回款计划成功', 'status': 1}，实际结果是：{'code': '20403', 'data': None, 'msg': '所有参数不能为空', 'status': 1}  -[test_F_audit.py:53]
2019-02-25 12:52:15,548-audit-ERROR-:执行失败！期望结果是：{'code': '20207', 'data': None, 'msg': '修改失败，当前标已经是该状态', 'status': 0}，实际结果是：{'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空', 'status': 0}  -[test_F_audit.py:53]
2019-02-25 12:52:15,736-audit-ERROR-:执行失败！期望结果是：{'code': '20211', 'status': 0}，实际结果是：{'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空', 'status': 0}  -[test_F_audit.py:53]
2019-02-25 12:52:15,923-audit-ERROR-:执行失败！期望结果是：{'code': '20211', 'status': 0}，实际结果是：{'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空', 'status': 0}  -[test_F_audit.py:53]
2019-02-25 12:52:16,111-audit-ERROR-:执行失败！期望结果是：{'code': '20211', 'status': 0}，实际结果是：{'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空', 'status': 0}  -[test_F_audit.py:53]
2019-02-25 12:52:16,282-audit-ERROR-:执行失败！期望结果是：{'code': '20211', 'status': 0}，实际结果是：{'code': '20203', 'data': None, 'msg': '参数错误：所有参数不能为空', 'status': 0}  -[test_F_audit.py:53]
2019-02-25 12:54:24,617-audit-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '生成回款计划成功', 'code': '10001'}，实际结果是：{'status': 0, 'data': None, 'code': '20402', 'msg': "\n### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3\n### The error may involve com.lemon.futureloan.dao.RepaymentMapper.batchAdd-Inline\n### The error occurred while setting parameters\n### SQL: insert into repayment(InvestId,CreateTime,Terms,UnfinishedPrincipal,   UnfinishedInterest,RepaymentDate,ActualRepaymentDate,Status)   values\n### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3\n; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3"}  -[test_F_audit.py:60]
2019-02-25 12:54:24,836-audit-ERROR-:执行失败！期望结果是：{'status': 0, 'data': None, 'code': '20207', 'msg': '修改失败，当前标已经是该状态'}，实际结果是：{'status': 0, 'data': None, 'code': '20210', 'msg': '不允许直接更新项目到还款中状态，请执行生成回款计划'}  -[test_F_audit.py:60]
2019-02-25 13:07:52,829-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0}，实际结果是：{'msg': '加标成功', 'code': '10001', 'data': None, 'status': 1}  -[test_E_add.py:47]
2019-02-25 13:07:58,156-audit-ERROR-:执行失败！期望结果是：{'code': '20420', 'msg': '服务器异常', 'status': 0}，实际结果是：{'msg': "\n### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3\n### The error may involve com.lemon.futureloan.dao.RepaymentMapper.batchAdd-Inline\n### The error occurred while setting parameters\n### SQL: insert into repayment(InvestId,CreateTime,Terms,UnfinishedPrincipal,   UnfinishedInterest,RepaymentDate,ActualRepaymentDate,Status)   values\n### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3\n; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 3", 'code': '20402', 'data': None, 'status': 0}  -[test_F_audit.py:60]
2019-02-25 13:12:37,064-add-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 '}，实际结果是：{'status': 1, 'code': '10001', 'data': None, 'msg': '加标成功'}  -[test_E_add.py:47]
2019-02-25 14:49:48,742-add-ERROR-:执行失败！期望结果是：{'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106', 'status': 0}，实际结果是：{'msg': '加标成功', 'code': '10001', 'status': 1, 'data': None}  -[test_E_add.py:47]
2019-02-25 14:50:51,866-add-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106'}，实际结果是：{'status': 1, 'msg': '加标成功', 'code': '10001', 'data': None}  -[test_E_add.py:47]
2019-02-25 15:00:22,184-register-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '注册成功', 'data': None, 'code': '10001'}，实际结果是：{'status': 0, 'msg': '手机号码已被注册', 'data': None, 'code': '20110'}  -[test_A_register.py:44]
2019-02-25 15:00:34,809-add-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106'}，实际结果是：{'status': 1, 'msg': '加标成功', 'data': None, 'code': '10001'}  -[test_E_add.py:47]
2019-02-25 15:02:23,542-add-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106'}，实际结果是：{'status': 1, 'data': None, 'msg': '加标成功', 'code': '10001'}  -[test_E_add.py:47]
2019-02-25 15:02:45,322-add-ERROR-:执行失败！期望结果是：{'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106', 'status': 0}，实际结果是：{'data': None, 'msg': '加标成功', 'code': '10001', 'status': 1}  -[test_E_add.py:47]
2019-02-25 15:21:50,304-add-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 '}，实际结果是：{'status': 1, 'code': '10001', 'data': None, 'msg': '加标成功'}  -[test_E_add.py:47]
2019-02-25 19:25:04,181-register-ERROR-:执行失败！期望结果是：{'data': None, 'msg': '密码不能为空', 'code': '20103', 'status': 0}，实际结果是：{'data': None, 'msg': '密码不能为空', 'code': '20103', 'status': 0}  -[test_A_register.py:60]
2019-02-25 19:25:04,605-register-ERROR-:执行失败！期望结果是：{'data': None, 'msg': '密码长度必须为 6~18', 'code': '20108', 'status': 0}，实际结果是：{'data': None, 'msg': '密码长度必须为6~18', 'code': '20108', 'status': 0}  -[test_A_register.py:60]
2019-02-25 19:25:05,019-register-ERROR-:执行失败！期望结果是：{'data': None, 'msg': '密码长度必须为 6~18', 'code': '20108', 'status': 0}，实际结果是：{'data': None, 'msg': '密码长度必须为6~18', 'code': '20108', 'status': 0}  -[test_A_register.py:60]
2019-02-25 19:25:05,405-register-ERROR-:执行失败！期望结果是：{'data': None, 'msg': '手机号码已被注册', 'code': '20110', 'status': 0}，实际结果是：{'data': None, 'msg': '手机号码已被注册', 'code': '20110', 'status': 0}  -[test_A_register.py:60]
2019-02-25 19:25:43,814-register-ERROR-:执行失败！期望结果是：{'msg': '密码不能为空', 'status': 0, 'data': None, 'code': '20103'}，实际结果是：{'msg': '密码不能为空', 'status': 0, 'data': None, 'code': '20103'}  -[test_A_register.py:60]
2019-02-25 19:25:44,273-register-ERROR-:执行失败！期望结果是：{'msg': '密码长度必须为 6~18', 'status': 0, 'data': None, 'code': '20108'}，实际结果是：{'msg': '密码长度必须为6~18', 'status': 0, 'data': None, 'code': '20108'}  -[test_A_register.py:60]
2019-02-25 19:25:44,695-register-ERROR-:执行失败！期望结果是：{'msg': '密码长度必须为 6~18', 'status': 0, 'data': None, 'code': '20108'}，实际结果是：{'msg': '密码长度必须为6~18', 'status': 0, 'data': None, 'code': '20108'}  -[test_A_register.py:60]
2019-02-25 19:25:45,126-register-ERROR-:执行失败！期望结果是：{'msg': '手机号码已被注册', 'status': 0, 'data': None, 'code': '20110'}，实际结果是：{'msg': '手机号码已被注册', 'status': 0, 'data': None, 'code': '20110'}  -[test_A_register.py:60]
2019-02-25 19:29:16,117-register-ERROR-:执行失败！期望结果是：{'msg': '密码不能为空', 'data': None, 'status': 0, 'code': '20103'}，实际结果是：{'msg': '密码不能为空', 'data': None, 'status': 0, 'code': '20103'}  -[test_A_register.py:60]
2019-02-25 19:29:16,530-register-ERROR-:执行失败！期望结果是：{'msg': '密码长度必须为 6~18', 'data': None, 'status': 0, 'code': '20108'}，实际结果是：{'msg': '密码长度必须为6~18', 'data': None, 'status': 0, 'code': '20108'}  -[test_A_register.py:60]
2019-02-25 19:29:16,928-register-ERROR-:执行失败！期望结果是：{'msg': '密码长度必须为 6~18', 'data': None, 'status': 0, 'code': '20108'}，实际结果是：{'msg': '密码长度必须为6~18', 'data': None, 'status': 0, 'code': '20108'}  -[test_A_register.py:60]
2019-02-25 19:29:17,338-register-ERROR-:执行失败！期望结果是：{'msg': '手机号码已被注册', 'data': None, 'status': 0, 'code': '20110'}，实际结果是：{'msg': '手机号码已被注册', 'data': None, 'status': 0, 'code': '20110'}  -[test_A_register.py:60]
2019-02-25 19:59:03,503-register-ERROR-:执行失败！期望结果是：{'data': None, 'msg': '密码不能为空', 'status': 0, 'code': '20103'}，实际结果是：{'data': None, 'msg': '密码不能为空', 'status': 0, 'code': '20103'}  -[test_A_register.py:60]
2019-02-25 19:59:03,931-register-ERROR-:执行失败！期望结果是：{'data': None, 'msg': '密码长度必须为 6~18', 'status': 0, 'code': '20108'}，实际结果是：{'data': None, 'msg': '密码长度必须为6~18', 'status': 0, 'code': '20108'}  -[test_A_register.py:60]
2019-02-25 19:59:04,360-register-ERROR-:执行失败！期望结果是：{'data': None, 'msg': '密码长度必须为 6~18', 'status': 0, 'code': '20108'}，实际结果是：{'data': None, 'msg': '密码长度必须为6~18', 'status': 0, 'code': '20108'}  -[test_A_register.py:60]
2019-02-25 19:59:04,786-register-ERROR-:执行失败！期望结果是：{'data': None, 'msg': '手机号码已被注册', 'status': 0, 'code': '20110'}，实际结果是：{'data': None, 'msg': '手机号码已被注册', 'status': 0, 'code': '20110'}  -[test_A_register.py:60]
2019-02-25 20:02:14,424-register-ERROR-:执行失败！期望结果是：{'code': '20103', 'msg': '密码不能为空', 'data': None, 'status': 0}，实际结果是：{'code': '20103', 'msg': '密码不能为空', 'data': None, 'status': 0}  -[test_A_register.py:60]
2019-02-25 20:02:14,872-register-ERROR-:执行失败！期望结果是：{'code': '20108', 'msg': '密码长度必须为 6~18', 'data': None, 'status': 0}，实际结果是：{'code': '20108', 'msg': '密码长度必须为6~18', 'data': None, 'status': 0}  -[test_A_register.py:60]
2019-02-25 20:02:15,280-register-ERROR-:执行失败！期望结果是：{'code': '20108', 'msg': '密码长度必须为 6~18', 'data': None, 'status': 0}，实际结果是：{'code': '20108', 'msg': '密码长度必须为6~18', 'data': None, 'status': 0}  -[test_A_register.py:60]
2019-02-25 20:02:15,805-register-ERROR-:执行失败！期望结果是：{'code': '20110', 'msg': '手机号码已被注册', 'data': None, 'status': 0}，实际结果是：{'code': '20110', 'msg': '手机号码已被注册', 'data': None, 'status': 0}  -[test_A_register.py:60]
2019-02-25 20:02:16,477-register-ERROR-:执行失败！期望结果是：{'code': '20109', 'msg': '手机号码格式不正确', 'data': None, 'status': 0}，实际结果是：{'code': '20109', 'msg': '手机号码格式不正确', 'data': None, 'status': 0}  -[test_A_register.py:60]
2019-02-25 20:06:10,198-register-ERROR-:执行失败！期望结果是：{'msg': '密码不能为空', 'status': 0, 'code': '20103', 'data': None}，实际结果是：{'msg': '密码不能为空', 'status': 0, 'code': '20103', 'data': None}  -[test_A_register.py:60]
2019-02-25 20:06:10,570-register-ERROR-:执行失败！期望结果是：{'msg': '密码长度必须为 6~18', 'status': 0, 'code': '20108', 'data': None}，实际结果是：{'msg': '密码长度必须为6~18', 'status': 0, 'code': '20108', 'data': None}  -[test_A_register.py:60]
2019-02-25 20:06:10,948-register-ERROR-:执行失败！期望结果是：{'msg': '密码长度必须为 6~18', 'status': 0, 'code': '20108', 'data': None}，实际结果是：{'msg': '密码长度必须为6~18', 'status': 0, 'code': '20108', 'data': None}  -[test_A_register.py:60]
2019-02-25 20:06:11,337-register-ERROR-:执行失败！期望结果是：{'msg': '手机号码已被注册', 'status': 0, 'code': '20110', 'data': None}，实际结果是：{'msg': '手机号码已被注册', 'status': 0, 'code': '20110', 'data': None}  -[test_A_register.py:60]
2019-02-25 20:06:11,971-register-ERROR-:执行失败！期望结果是：{'msg': '手机号码格式不正确', 'status': 0, 'code': '20109', 'data': None}，实际结果是：{'msg': '手机号码格式不正确', 'status': 0, 'code': '20109', 'data': None}  -[test_A_register.py:60]
2019-02-25 20:06:46,449-register-ERROR-:执行失败！期望结果是：{'status': 0, 'data': None, 'msg': '手机号码已被注册', 'code': '20110'}，实际结果是：{'status': 0, 'data': None, 'msg': '手机号码已被注册', 'code': '20110'}  -[test_A_register.py:60]
2019-02-25 22:45:48,114-recharge-ERROR-:执行失败！期望结果是：{'code': '10001', 'msg': '充值成功', 'status': 1}，实际结果是：{'code': '10001', 'msg': '充值成功', 'data': {'mobilephone': '13539787045', 'type': '1', 'regname': 'huahua', 'leaveamount': '22597.55', 'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'regtime': '2019-01-17 19:53:52.0', 'id': 1114837}, 'status': 1}  -[test_C_recharge.py:60]
2019-02-25 22:47:14,038-recharge-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '充值成功'}，实际结果是：{'data': {'regtime': '2019-01-17 19:53:52.0', 'leaveamount': '22898.00', 'id': 1114837, 'regname': 'huahua', 'type': '1', 'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'mobilephone': '13539787045'}, 'code': '10001', 'status': 1, 'msg': '充值成功'}  -[test_C_recharge.py:60]
2019-02-25 22:47:14,571-recharge-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '充值成功'}，实际结果是：{'data': {'regtime': '2019-01-17 19:53:52.0', 'leaveamount': '23138.90', 'id': 1114837, 'regname': 'huahua', 'type': '1', 'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'mobilephone': '13539787045'}, 'code': '10001', 'status': 1, 'msg': '充值成功'}  -[test_C_recharge.py:60]
2019-02-25 22:47:15,108-recharge-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '充值成功'}，实际结果是：{'data': {'regtime': '2019-01-17 19:53:52.0', 'leaveamount': '24138.90', 'id': 1114837, 'regname': 'huahua', 'type': '1', 'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'mobilephone': '13539787045'}, 'code': '10001', 'status': 1, 'msg': '充值成功'}  -[test_C_recharge.py:60]
2019-02-25 22:49:40,665-recharge-ERROR-:执行失败！期望结果是：{'msg': '充值成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '充值成功', 'code': '10001', 'status': 1, 'data': {'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'regname': 'huahua', 'id': 1114837, 'type': '1', 'mobilephone': '13539787045', 'regtime': '2019-01-17 19:53:52.0', 'leaveamount': '24439.35'}}  -[test_C_recharge.py:61]
2019-02-25 22:49:41,218-recharge-ERROR-:执行失败！期望结果是：{'msg': '充值成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '充值成功', 'code': '10001', 'status': 1, 'data': {'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'regname': 'huahua', 'id': 1114837, 'type': '1', 'mobilephone': '13539787045', 'regtime': '2019-01-17 19:53:52.0', 'leaveamount': '24680.25'}}  -[test_C_recharge.py:61]
2019-02-25 22:49:41,760-recharge-ERROR-:执行失败！期望结果是：{'msg': '充值成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '充值成功', 'code': '10001', 'status': 1, 'data': {'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'regname': 'huahua', 'id': 1114837, 'type': '1', 'mobilephone': '13539787045', 'regtime': '2019-01-17 19:53:52.0', 'leaveamount': '25680.25'}}  -[test_C_recharge.py:61]
2019-02-25 22:57:14,312-recharge-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '充值成功'}，实际结果是：{'status': 1, 'code': '10001', 'msg': '充值成功', 'data': {'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'mobilephone': '13539787045', 'id': 1114837, 'leaveamount': '27522.05', 'type': '1', 'regname': 'huahua', 'regtime': '2019-01-17 19:53:52.0'}}  -[test_C_recharge.py:61]
2019-02-25 22:57:14,856-recharge-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '充值成功'}，实际结果是：{'status': 1, 'code': '10001', 'msg': '充值成功', 'data': {'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'mobilephone': '13539787045', 'id': 1114837, 'leaveamount': '27762.95', 'type': '1', 'regname': 'huahua', 'regtime': '2019-01-17 19:53:52.0'}}  -[test_C_recharge.py:61]
2019-02-25 22:57:15,392-recharge-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '充值成功'}，实际结果是：{'status': 1, 'code': '10001', 'msg': '充值成功', 'data': {'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'mobilephone': '13539787045', 'id': 1114837, 'leaveamount': '28762.95', 'type': '1', 'regname': 'huahua', 'regtime': '2019-01-17 19:53:52.0'}}  -[test_C_recharge.py:61]
2019-02-25 23:07:39,999-recharge-ERROR-:执行失败！期望结果是：{'msg': '充值成功', 'status': 1, 'code': '10001'}，实际结果是：{'data': {'regtime': '2019-01-17 19:53:52.0', 'type': '1', 'leaveamount': '39852.85', 'mobilephone': '13539787045', 'id': 1114837, 'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'regname': 'huahua'}, 'msg': '充值成功', 'status': 1, 'code': '10001'}  -[test_C_recharge.py:61]
2019-02-25 23:07:40,574-recharge-ERROR-:执行失败！期望结果是：{'msg': '充值成功', 'status': 1, 'code': '10001'}，实际结果是：{'data': {'regtime': '2019-01-17 19:53:52.0', 'type': '1', 'leaveamount': '40093.75', 'mobilephone': '13539787045', 'id': 1114837, 'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'regname': 'huahua'}, 'msg': '充值成功', 'status': 1, 'code': '10001'}  -[test_C_recharge.py:61]
2019-02-25 23:07:41,086-recharge-ERROR-:执行失败！期望结果是：{'msg': '充值成功', 'status': 1, 'code': '10001'}，实际结果是：{'data': {'regtime': '2019-01-17 19:53:52.0', 'type': '1', 'leaveamount': '41093.75', 'mobilephone': '13539787045', 'id': 1114837, 'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'regname': 'huahua'}, 'msg': '充值成功', 'status': 1, 'code': '10001'}  -[test_C_recharge.py:61]
2019-02-25 23:08:42,955-recharge-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '充值成功'}，实际结果是：{'data': {'id': 1114837, 'type': '1', 'mobilephone': '13539787045', 'regname': 'huahua', 'leaveamount': '41394.20', 'regtime': '2019-01-17 19:53:52.0', 'pwd': '4B63973E4281D3B2318C2EA1F7FFC861'}, 'code': '10001', 'status': 1, 'msg': '充值成功'}  -[test_C_recharge.py:61]
2019-02-25 23:08:43,498-recharge-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '充值成功'}，实际结果是：{'data': {'id': 1114837, 'type': '1', 'mobilephone': '13539787045', 'regname': 'huahua', 'leaveamount': '41635.10', 'regtime': '2019-01-17 19:53:52.0', 'pwd': '4B63973E4281D3B2318C2EA1F7FFC861'}, 'code': '10001', 'status': 1, 'msg': '充值成功'}  -[test_C_recharge.py:61]
2019-02-25 23:08:44,025-recharge-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '充值成功'}，实际结果是：{'data': {'id': 1114837, 'type': '1', 'mobilephone': '13539787045', 'regname': 'huahua', 'leaveamount': '42635.10', 'regtime': '2019-01-17 19:53:52.0', 'pwd': '4B63973E4281D3B2318C2EA1F7FFC861'}, 'code': '10001', 'status': 1, 'msg': '充值成功'}  -[test_C_recharge.py:61]
2019-02-25 23:09:33,270-recharge-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '充值成功'}，实际结果是：{'code': '10001', 'status': 1, 'msg': '充值成功', 'data': {'leaveamount': '42935.55', 'mobilephone': '13539787045', 'regtime': '2019-01-17 19:53:52.0', 'id': 1114837, 'regname': 'huahua', 'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'type': '1'}}  -[test_C_recharge.py:61]
2019-02-25 23:09:33,807-recharge-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '充值成功'}，实际结果是：{'code': '10001', 'status': 1, 'msg': '充值成功', 'data': {'leaveamount': '43176.45', 'mobilephone': '13539787045', 'regtime': '2019-01-17 19:53:52.0', 'id': 1114837, 'regname': 'huahua', 'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'type': '1'}}  -[test_C_recharge.py:61]
2019-02-25 23:11:25,137-recharge-ERROR-:执行失败！期望结果是：{'msg': '充值成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '充值成功', 'status': 1, 'code': '10001', 'data': {'id': 1114837, 'regname': 'huahua', 'leaveamount': '44717.80', 'mobilephone': '13539787045', 'regtime': '2019-01-17 19:53:52.0', 'type': '1', 'pwd': '4B63973E4281D3B2318C2EA1F7FFC861'}}  -[test_C_recharge.py:61]
2019-02-25 23:15:22,187-recharge-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '充值成功'}，实际结果是：{'code': '10001', 'data': {'regname': 'huahua', 'id': 1114837, 'regtime': '2019-01-17 19:53:52.0', 'leaveamount': '47800.50', 'mobilephone': '13539787045', 'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'type': '1'}, 'status': 1, 'msg': '充值成功'}  -[test_C_recharge.py:61]
2019-02-25 23:23:11,628-recharge-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '手机号不能为空', 'code': '20103'}，实际结果是：{'status': 0, 'data': None, 'code': None, 'msg': '抱歉，请先登录。'}  -[test_C_recharge.py:63]
2019-02-25 23:23:11,941-recharge-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '手机号格式不正确', 'code': '20109'}，实际结果是：{'status': 0, 'data': None, 'code': None, 'msg': '抱歉，请先登录。'}  -[test_C_recharge.py:63]
2019-02-26 13:43:54,870-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '成功'}，实际结果是：{'code': '10001', 'status': 1, 'data': None, 'msg': '加标成功'}  -[test_E_add.py:59]
2019-02-26 13:43:57,326-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 '}，实际结果是：{'code': '10001', 'status': 1, 'data': None, 'msg': '加标成功'}  -[test_E_add.py:59]
2019-02-26 13:43:58,404-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '成功'}，实际结果是：{'code': '10001', 'status': 1, 'data': None, 'msg': '加标成功'}  -[test_E_add.py:59]
2019-02-26 13:43:58,695-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '成功'}，实际结果是：{'code': '10001', 'status': 1, 'data': None, 'msg': '加标成功'}  -[test_E_add.py:59]
2019-02-26 13:43:58,974-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '成功'}，实际结果是：{'code': '10001', 'status': 1, 'data': None, 'msg': '加标成功'}  -[test_E_add.py:59]
2019-02-26 13:43:59,426-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '成功'}，实际结果是：{'code': '10001', 'status': 1, 'data': None, 'msg': '加标成功'}  -[test_E_add.py:59]
2019-02-26 13:46:34,957-add-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '成功', 'code': '10001'}，实际结果是：{'status': 1, 'msg': '加标成功', 'code': '10001', 'data': None}  -[test_E_add.py:60]
2019-02-26 13:46:37,334-add-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106'}，实际结果是：{'status': 1, 'msg': '加标成功', 'code': '10001', 'data': None}  -[test_E_add.py:60]
2019-02-26 13:46:38,351-add-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '成功', 'code': '10001'}，实际结果是：{'status': 1, 'msg': '加标成功', 'code': '10001', 'data': None}  -[test_E_add.py:60]
2019-02-26 13:46:38,617-add-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '成功', 'code': '10001'}，实际结果是：{'status': 1, 'msg': '加标成功', 'code': '10001', 'data': None}  -[test_E_add.py:60]
2019-02-26 13:46:39,176-add-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '成功', 'code': '10001'}，实际结果是：{'status': 1, 'msg': '加标成功', 'code': '10001', 'data': None}  -[test_E_add.py:60]
2019-02-26 13:46:39,647-add-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '成功', 'code': '10001'}，实际结果是：{'status': 1, 'msg': '加标成功', 'code': '10001', 'data': None}  -[test_E_add.py:60]
2019-02-26 13:47:48,354-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0}，实际结果是：{'code': '10001', 'msg': '加标成功', 'data': None, 'status': 1}  -[test_E_add.py:60]
2019-02-26 13:48:13,481-add-ERROR-:执行失败！期望结果是：{'msg': '成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '加标成功', 'status': 1, 'code': '10001', 'data': None}  -[test_E_add.py:60]
2019-02-26 13:48:15,944-add-ERROR-:执行失败！期望结果是：{'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0, 'code': '20106'}，实际结果是：{'msg': '加标成功', 'status': 1, 'code': '10001', 'data': None}  -[test_E_add.py:60]
2019-02-26 13:48:16,954-add-ERROR-:执行失败！期望结果是：{'msg': '成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '加标成功', 'status': 1, 'code': '10001', 'data': None}  -[test_E_add.py:60]
2019-02-26 13:48:17,225-add-ERROR-:执行失败！期望结果是：{'msg': '成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '加标成功', 'status': 1, 'code': '10001', 'data': None}  -[test_E_add.py:60]
2019-02-26 13:48:17,524-add-ERROR-:执行失败！期望结果是：{'msg': '成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '加标成功', 'status': 1, 'code': '10001', 'data': None}  -[test_E_add.py:60]
2019-02-26 13:48:18,001-add-ERROR-:执行失败！期望结果是：{'msg': '成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '加标成功', 'status': 1, 'code': '10001', 'data': None}  -[test_E_add.py:60]
2019-02-26 13:48:40,689-add-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 '}，实际结果是：{'data': None, 'status': 1, 'code': '10001', 'msg': '加标成功'}  -[test_E_add.py:60]
2019-02-26 13:48:42,194-add-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '成功'}，实际结果是：{'data': None, 'status': 1, 'code': '10001', 'msg': '加标成功'}  -[test_E_add.py:60]
2019-02-26 13:49:20,511-add-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '成功'}，实际结果是：{'status': 1, 'code': '10001', 'data': None, 'msg': '加标成功'}  -[test_E_add.py:60]
2019-02-26 13:49:22,753-add-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 '}，实际结果是：{'status': 1, 'code': '10001', 'data': None, 'msg': '加标成功'}  -[test_E_add.py:60]
2019-02-26 13:49:23,978-add-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '成功'}，实际结果是：{'status': 1, 'code': '10001', 'data': None, 'msg': '加标成功'}  -[test_E_add.py:60]
2019-02-26 13:49:24,246-add-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '成功'}，实际结果是：{'status': 1, 'code': '10001', 'data': None, 'msg': '加标成功'}  -[test_E_add.py:60]
2019-02-26 13:49:24,514-add-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '成功'}，实际结果是：{'status': 1, 'code': '10001', 'data': None, 'msg': '加标成功'}  -[test_E_add.py:60]
2019-02-26 13:49:24,955-add-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '成功'}，实际结果是：{'status': 1, 'code': '10001', 'data': None, 'msg': '加标成功'}  -[test_E_add.py:60]
2019-02-26 13:54:08,746-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '成功'}，实际结果是：{'code': '10001', 'data': None, 'status': 1, 'msg': '加标成功'}  -[test_E_add.py:60]
2019-02-26 13:54:11,118-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 '}，实际结果是：{'code': '10001', 'data': None, 'status': 1, 'msg': '加标成功'}  -[test_E_add.py:60]
2019-02-26 13:54:12,406-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '成功'}，实际结果是：{'code': '10001', 'data': None, 'status': 1, 'msg': '加标成功'}  -[test_E_add.py:60]
2019-02-26 13:54:12,667-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '成功'}，实际结果是：{'code': '10001', 'data': None, 'status': 1, 'msg': '加标成功'}  -[test_E_add.py:60]
2019-02-26 13:54:12,945-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '成功'}，实际结果是：{'code': '10001', 'data': None, 'status': 1, 'msg': '加标成功'}  -[test_E_add.py:60]
2019-02-26 13:54:13,469-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '成功'}，实际结果是：{'code': '10001', 'data': None, 'status': 1, 'msg': '加标成功'}  -[test_E_add.py:60]
2019-02-26 13:55:41,905-add-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106'}，实际结果是：{'data': None, 'status': 1, 'msg': '加标成功', 'code': '10001'}  -[test_E_add.py:60]
2019-02-26 13:55:43,159-add-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '成功', 'code': '10001'}，实际结果是：{'data': None, 'status': 1, 'msg': '加标成功', 'code': '10001'}  -[test_E_add.py:60]
2019-02-26 13:58:51,002-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 '}，实际结果是：{'code': '10001', 'status': 1, 'data': None, 'msg': '加标成功'}  -[test_E_add.py:60]
2019-02-26 13:58:52,302-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '成功'}，实际结果是：{'code': '10001', 'status': 1, 'data': None, 'msg': '加标成功'}  -[test_E_add.py:60]
2019-02-26 14:05:02,739-add-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106'}，实际结果是：{'data': None, 'status': 1, 'msg': '加标成功', 'code': '10001'}  -[test_E_add.py:60]
2019-02-26 14:05:04,029-add-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '成功', 'code': '10001'}，实际结果是：{'data': None, 'status': 1, 'msg': '加标成功', 'code': '10001'}  -[test_E_add.py:60]
2019-02-26 14:05:04,305-add-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '成功', 'code': '10001'}，实际结果是：{'data': None, 'status': 1, 'msg': '加标成功', 'code': '10001'}  -[test_E_add.py:60]
2019-02-26 14:12:40,079-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0}，实际结果是：{'code': '10001', 'data': None, 'msg': '加标成功', 'status': 1}  -[test_E_add.py:60]
2019-02-26 14:16:20,711-add-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106'}，实际结果是：{'data': None, 'status': 1, 'msg': '加标成功', 'code': '10001'}  -[test_E_add.py:60]
2019-02-26 14:16:22,040-add-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '成功', 'code': '10001'}，实际结果是：{'data': None, 'status': 1, 'msg': '加标成功', 'code': '10001'}  -[test_E_add.py:60]
2019-02-26 14:16:22,307-add-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '成功', 'code': '10001'}，实际结果是：{'data': None, 'status': 1, 'msg': '加标成功', 'code': '10001'}  -[test_E_add.py:60]
2019-02-26 14:18:48,288-add-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 '}，实际结果是：{'status': 1, 'code': '10001', 'msg': '加标成功', 'data': None}  -[test_E_add.py:60]
2019-02-26 14:18:49,817-add-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '成功'}，实际结果是：{'status': 1, 'code': '10001', 'msg': '加标成功', 'data': None}  -[test_E_add.py:60]
2019-02-26 14:18:50,056-add-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '成功'}，实际结果是：{'status': 1, 'code': '10001', 'msg': '加标成功', 'data': None}  -[test_E_add.py:60]
2019-02-26 14:27:31,879-add-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106'}，实际结果是：{'status': 1, 'msg': '加标成功', 'data': None, 'code': '10001'}  -[test_E_add.py:60]
2019-02-26 14:27:33,758-add-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '成功', 'code': '10001'}，实际结果是：{'status': 1, 'msg': '加标成功', 'data': None, 'code': '10001'}  -[test_E_add.py:60]
2019-02-26 14:29:07,761-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0}，实际结果是：{'code': '10001', 'data': None, 'status': 1, 'msg': '加标成功'}  -[test_E_add.py:60]
2019-02-26 14:34:17,641-add-ERROR-:执行失败！期望结果是：{'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106', 'status': 0}，实际结果是：{'msg': '加标成功', 'data': None, 'code': '10001', 'status': 1}  -[test_E_add.py:61]
2019-02-26 14:37:05,134-add-ERROR-:执行失败！期望结果是：{'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0, 'code': '20106'}，实际结果是：{'msg': '加标成功', 'data': None, 'status': 1, 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 14:37:07,217-add-ERROR-:执行失败！期望结果是：{'msg': '成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '加标成功', 'data': None, 'status': 1, 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 14:39:52,320-add-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106'}，实际结果是：{'status': 1, 'msg': '加标成功', 'data': None, 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 14:39:53,177-add-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '成功', 'code': '10001'}，实际结果是：{'status': 1, 'msg': '加标成功', 'data': None, 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 14:41:28,017-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 '}，实际结果是：{'code': '10001', 'status': 1, 'msg': '加标成功', 'data': None}  -[test_E_add.py:61]
2019-02-26 14:41:29,947-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '成功'}，实际结果是：{'code': '10001', 'status': 1, 'msg': '加标成功', 'data': None}  -[test_E_add.py:61]
2019-02-26 14:43:11,631-add-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 '}，实际结果是：{'status': 1, 'data': None, 'code': '10001', 'msg': '加标成功'}  -[test_E_add.py:61]
2019-02-26 14:43:59,078-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0}，实际结果是：{'code': '10001', 'msg': '加标成功', 'status': 1, 'data': None}  -[test_E_add.py:61]
2019-02-26 14:44:01,226-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'msg': '成功', 'status': 1}，实际结果是：{'code': '10001', 'msg': '加标成功', 'status': 1, 'data': None}  -[test_E_add.py:61]
2019-02-26 14:44:42,324-add-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106'}，实际结果是：{'status': 1, 'msg': '加标成功', 'data': None, 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 14:44:43,148-add-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '成功', 'code': '10001'}，实际结果是：{'status': 1, 'msg': '加标成功', 'data': None, 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 16:08:39,869-invest-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'data': None, 'msg': '该标可投金额不足，可投金额：297600.0', 'status': 0, 'code': '11012'}  -[test_G_invest.py:65]
2019-02-26 16:12:03,957-invest-ERROR-:执行失败！期望结果是：{'code': '11012', 'status': 0}，实际结果是：{'data': None, 'code': '11010', 'status': 0, 'msg': '该标不在竞标中状态，无法完成投标'}  -[test_G_invest.py:65]
2019-02-26 16:13:20,634-invest-ERROR-:执行失败！期望结果是：{'code': '11012', 'status': 0}，实际结果是：{'code': '10001', 'msg': '竞标成功', 'data': None, 'status': 1}  -[test_G_invest.py:65]
2019-02-26 16:31:09,494-invest-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '该标已经满标,无法进行投资', 'code': '11011'}，实际结果是：{'status': 0, 'data': None, 'msg': '该标不在竞标中状态，无法完成投标', 'code': '11010'}  -[test_G_invest.py:65]
2019-02-26 16:31:10,381-invest-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '11012'}，实际结果是：{'status': 1, 'data': None, 'msg': '竞标成功', 'code': '10001'}  -[test_G_invest.py:65]
2019-02-26 16:32:20,654-invest-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '该标已经满标,无法进行投资', 'code': '11011'}，实际结果是：{'status': 0, 'data': None, 'msg': '该标不在竞标中状态，无法完成投标', 'code': '11010'}  -[test_G_invest.py:65]
2019-02-26 16:32:21,584-invest-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '11012'}，实际结果是：{'status': 1, 'data': None, 'msg': '竞标成功', 'code': '10001'}  -[test_G_invest.py:65]
2019-02-26 16:33:31,321-invest-ERROR-:执行失败！期望结果是：{'code': '11011', 'msg': '该标已经满标,无法进行投资', 'status': 1}，实际结果是：{'msg': '该标不在竞标中状态，无法完成投标', 'code': '11010', 'data': None, 'status': 0}  -[test_G_invest.py:65]
2019-02-26 16:33:32,221-invest-ERROR-:执行失败！期望结果是：{'code': '11012', 'status': 0}，实际结果是：{'msg': '竞标成功', 'code': '10001', 'data': None, 'status': 1}  -[test_G_invest.py:65]
2019-02-26 16:33:32,425-invest-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1}，实际结果是：{'msg': '不允许直接更新项目到还款中状态，请执行生成回款计划', 'code': '20210', 'data': None, 'status': 0}  -[test_G_invest.py:65]
2019-02-26 16:34:44,517-invest-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '11012'}，实际结果是：{'data': None, 'status': 1, 'msg': '竞标成功', 'code': '10001'}  -[test_G_invest.py:65]
2019-02-26 16:36:18,860-withdraw-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '提现成功'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'code': '20119', 'status': 1, 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:36:19,074-withdraw-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '提现成功'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'code': '20119', 'status': 1, 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:36:19,270-withdraw-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '提现成功'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'code': '20119', 'status': 1, 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:38:33,688-withdraw-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '充值成功'}，实际结果是：{'data': None, 'code': '20117', 'status': 0, 'msg': '请输入范围在0到50万之间的正数金额'}  -[test_H_withdraw.py:42]
2019-02-26 16:38:33,875-withdraw-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '提现成功'}，实际结果是：{'data': None, 'code': '20119', 'status': 1, 'msg': '余额不足，请修改提现额度'}  -[test_H_withdraw.py:42]
2019-02-26 16:38:34,090-withdraw-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '提现成功'}，实际结果是：{'data': None, 'code': '20119', 'status': 1, 'msg': '余额不足，请修改提现额度'}  -[test_H_withdraw.py:42]
2019-02-26 16:38:34,275-withdraw-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '提现成功'}，实际结果是：{'data': None, 'code': '20119', 'status': 1, 'msg': '余额不足，请修改提现额度'}  -[test_H_withdraw.py:42]
2019-02-26 16:40:48,437-withdraw-ERROR-:执行失败！期望结果是：{'code': '10001', 'msg': '提现成功', 'status': 1}，实际结果是：{'data': None, 'code': '20119', 'msg': '余额不足，请修改提现额度', 'status': 1}  -[test_H_withdraw.py:42]
2019-02-26 16:40:48,633-withdraw-ERROR-:执行失败！期望结果是：{'code': '10001', 'msg': '提现成功', 'status': 1}，实际结果是：{'data': None, 'code': '20119', 'msg': '余额不足，请修改提现额度', 'status': 1}  -[test_H_withdraw.py:42]
2019-02-26 16:40:48,948-withdraw-ERROR-:执行失败！期望结果是：{'code': '10001', 'msg': '提现成功', 'status': 1}，实际结果是：{'data': None, 'code': '20119', 'msg': '余额不足，请修改提现额度', 'status': 1}  -[test_H_withdraw.py:42]
2019-02-26 16:41:23,406-withdraw-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '提现成功'}，实际结果是：{'code': '20119', 'status': 1, 'msg': '余额不足，请修改提现额度', 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:41:23,609-withdraw-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '提现成功'}，实际结果是：{'code': '20119', 'status': 1, 'msg': '余额不足，请修改提现额度', 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:41:23,815-withdraw-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '提现成功'}，实际结果是：{'code': '20119', 'status': 1, 'msg': '余额不足，请修改提现额度', 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:41:29,333-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '余额不足，请修改提现额度', 'code': '20119', 'status': 1, 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:41:29,523-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '余额不足，请修改提现额度', 'code': '20119', 'status': 1, 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:41:29,729-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '余额不足，请修改提现额度', 'code': '20119', 'status': 1, 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:41:35,934-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '提现成功', 'code': '10001'}，实际结果是：{'status': 1, 'data': None, 'code': '20119', 'msg': '余额不足，请修改提现额度'}  -[test_H_withdraw.py:42]
2019-02-26 16:41:36,125-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '提现成功', 'code': '10001'}，实际结果是：{'status': 1, 'data': None, 'code': '20119', 'msg': '余额不足，请修改提现额度'}  -[test_H_withdraw.py:42]
2019-02-26 16:41:36,327-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '提现成功', 'code': '10001'}，实际结果是：{'status': 1, 'data': None, 'code': '20119', 'msg': '余额不足，请修改提现额度'}  -[test_H_withdraw.py:42]
2019-02-26 16:41:42,062-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '提现成功', 'code': '10001'}，实际结果是：{'data': None, 'status': 1, 'msg': '余额不足，请修改提现额度', 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-26 16:41:42,295-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '提现成功', 'code': '10001'}，实际结果是：{'data': None, 'status': 1, 'msg': '余额不足，请修改提现额度', 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-26 16:41:42,464-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '提现成功', 'code': '10001'}，实际结果是：{'data': None, 'status': 1, 'msg': '余额不足，请修改提现额度', 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-26 16:41:55,585-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '余额不足，请修改提现额度', 'code': '20119', 'status': 1, 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:41:55,779-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '余额不足，请修改提现额度', 'code': '20119', 'status': 1, 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:41:55,940-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '余额不足，请修改提现额度', 'code': '20119', 'status': 1, 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:42:01,834-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'status': 1, 'data': None, 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-26 16:42:02,035-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'status': 1, 'data': None, 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-26 16:42:02,245-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'status': 1, 'data': None, 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-26 16:42:07,296-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '余额不足，请修改提现额度', 'code': '20119', 'data': None, 'status': 1}  -[test_H_withdraw.py:42]
2019-02-26 16:42:07,481-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '余额不足，请修改提现额度', 'code': '20119', 'data': None, 'status': 1}  -[test_H_withdraw.py:42]
2019-02-26 16:42:07,660-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '余额不足，请修改提现额度', 'code': '20119', 'data': None, 'status': 1}  -[test_H_withdraw.py:42]
2019-02-26 16:42:13,854-withdraw-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '提现成功'}，实际结果是：{'code': '20119', 'data': None, 'status': 1, 'msg': '余额不足，请修改提现额度'}  -[test_H_withdraw.py:42]
2019-02-26 16:42:14,045-withdraw-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '提现成功'}，实际结果是：{'code': '20119', 'data': None, 'status': 1, 'msg': '余额不足，请修改提现额度'}  -[test_H_withdraw.py:42]
2019-02-26 16:42:14,237-withdraw-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '提现成功'}，实际结果是：{'code': '20119', 'data': None, 'status': 1, 'msg': '余额不足，请修改提现额度'}  -[test_H_withdraw.py:42]
2019-02-26 16:42:20,025-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'data': None, 'status': 1, 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-26 16:42:20,248-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'data': None, 'status': 1, 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-26 16:42:20,472-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'data': None, 'status': 1, 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-26 16:42:53,924-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '提现成功'}，实际结果是：{'status': 1, 'code': '20119', 'msg': '余额不足，请修改提现额度', 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:42:54,108-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '提现成功'}，实际结果是：{'status': 1, 'code': '20119', 'msg': '余额不足，请修改提现额度', 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:42:54,292-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '提现成功'}，实际结果是：{'status': 1, 'code': '20119', 'msg': '余额不足，请修改提现额度', 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:42:59,931-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '提现成功'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'status': 1, 'code': '20119', 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:43:00,099-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '提现成功'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'status': 1, 'code': '20119', 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:43:00,316-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '提现成功'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'status': 1, 'code': '20119', 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:43:06,135-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '提现成功', 'code': '10001'}，实际结果是：{'data': None, 'status': 1, 'msg': '余额不足，请修改提现额度', 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-26 16:43:06,327-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '提现成功', 'code': '10001'}，实际结果是：{'data': None, 'status': 1, 'msg': '余额不足，请修改提现额度', 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-26 16:43:06,537-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '提现成功', 'code': '10001'}，实际结果是：{'data': None, 'status': 1, 'msg': '余额不足，请修改提现额度', 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-26 16:43:12,393-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '余额不足，请修改提现额度', 'data': None, 'code': '20119', 'status': 1}  -[test_H_withdraw.py:42]
2019-02-26 16:43:12,598-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '余额不足，请修改提现额度', 'data': None, 'code': '20119', 'status': 1}  -[test_H_withdraw.py:42]
2019-02-26 16:43:12,782-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '余额不足，请修改提现额度', 'data': None, 'code': '20119', 'status': 1}  -[test_H_withdraw.py:42]
2019-02-26 16:43:18,427-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '提现成功', 'code': '10001'}，实际结果是：{'status': 1, 'data': None, 'msg': '余额不足，请修改提现额度', 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-26 16:43:18,617-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '提现成功', 'code': '10001'}，实际结果是：{'status': 1, 'data': None, 'msg': '余额不足，请修改提现额度', 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-26 16:43:18,793-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '提现成功', 'code': '10001'}，实际结果是：{'status': 1, 'data': None, 'msg': '余额不足，请修改提现额度', 'code': '20119'}  -[test_H_withdraw.py:42]
2019-02-26 16:43:23,762-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '提现成功'}，实际结果是：{'status': 1, 'data': None, 'code': '20119', 'msg': '余额不足，请修改提现额度'}  -[test_H_withdraw.py:42]
2019-02-26 16:43:24,340-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '提现成功'}，实际结果是：{'status': 1, 'data': None, 'code': '20119', 'msg': '余额不足，请修改提现额度'}  -[test_H_withdraw.py:42]
2019-02-26 16:43:24,538-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '提现成功'}，实际结果是：{'status': 1, 'data': None, 'code': '20119', 'msg': '余额不足，请修改提现额度'}  -[test_H_withdraw.py:42]
2019-02-26 16:43:29,230-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '余额不足，请修改提现额度', 'code': '20119', 'status': 1, 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:43:29,415-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '余额不足，请修改提现额度', 'code': '20119', 'status': 1, 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:43:29,602-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'code': '10001', 'status': 1}，实际结果是：{'msg': '余额不足，请修改提现额度', 'code': '20119', 'status': 1, 'data': None}  -[test_H_withdraw.py:42]
2019-02-26 16:51:15,880-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0}，实际结果是：{'code': '10001', 'msg': '加标成功', 'status': 1, 'data': None}  -[test_E_add.py:61]
2019-02-26 16:51:18,385-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'msg': '成功', 'status': 1}，实际结果是：{'code': '10001', 'msg': '加标成功', 'status': 1, 'data': None}  -[test_E_add.py:61]
2019-02-26 16:54:56,123-add-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 '}，实际结果是：{'status': 1, 'code': '10001', 'msg': '加标成功', 'data': None}  -[test_E_add.py:61]
2019-02-26 16:54:57,687-add-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '成功'}，实际结果是：{'status': 1, 'code': '10001', 'msg': '加标成功', 'data': None}  -[test_E_add.py:61]
2019-02-26 16:54:57,958-add-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '成功'}，实际结果是：{'status': 1, 'code': '10001', 'msg': '加标成功', 'data': None}  -[test_E_add.py:61]
2019-02-26 16:54:58,442-add-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '成功'}，实际结果是：{'status': 1, 'code': '10001', 'msg': '加标成功', 'data': None}  -[test_E_add.py:61]
2019-02-26 16:56:37,432-add-ERROR-:执行失败！期望结果是：{'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0, 'code': '20106'}，实际结果是：{'msg': '加标成功', 'data': None, 'status': 1, 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 16:56:38,275-add-ERROR-:执行失败！期望结果是：{'msg': '成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '加标成功', 'data': None, 'status': 1, 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 16:57:38,455-add-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 '}，实际结果是：{'msg': '加标成功', 'status': 1, 'code': '10001', 'data': None}  -[test_E_add.py:61]
2019-02-26 16:57:39,253-add-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001', 'msg': '成功'}，实际结果是：{'msg': '加标成功', 'status': 1, 'code': '10001', 'data': None}  -[test_E_add.py:61]
2019-02-26 16:58:57,312-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0}，实际结果是：{'code': '10001', 'msg': '加标成功', 'data': None, 'status': 1}  -[test_E_add.py:61]
2019-02-26 16:58:58,706-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'msg': '成功', 'status': 1}，实际结果是：{'code': '10001', 'msg': '加标成功', 'data': None, 'status': 1}  -[test_E_add.py:61]
2019-02-26 16:58:59,179-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'msg': '成功', 'status': 1}，实际结果是：{'code': '10001', 'msg': '加标成功', 'data': None, 'status': 1}  -[test_E_add.py:61]
2019-02-26 17:00:02,131-add-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '成功', 'code': '10001'}，实际结果是：{'status': 1, 'data': None, 'msg': '加标成功', 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 17:00:02,336-add-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106'}，实际结果是：{'status': 1, 'data': None, 'msg': '加标成功', 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 17:01:03,837-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'msg': '成功', 'status': 1}，实际结果是：{'code': '10001', 'msg': '加标成功', 'data': None, 'status': 1}  -[test_E_add.py:61]
2019-02-26 17:01:04,314-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'msg': '成功', 'status': 1}，实际结果是：{'code': '10001', 'msg': '加标成功', 'data': None, 'status': 1}  -[test_E_add.py:61]
2019-02-26 17:01:04,975-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0}，实际结果是：{'code': '10001', 'msg': '加标成功', 'data': None, 'status': 1}  -[test_E_add.py:61]
2019-02-26 17:01:25,013-add-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '成功', 'code': '10001'}，实际结果是：{'data': None, 'status': 1, 'msg': '加标成功', 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 17:01:26,084-add-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106'}，实际结果是：{'data': None, 'status': 1, 'msg': '加标成功', 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 17:02:30,012-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'msg': '成功', 'status': 1}，实际结果是：{'code': '10001', 'msg': '加标成功', 'status': 1, 'data': None}  -[test_E_add.py:61]
2019-02-26 17:02:31,119-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0}，实际结果是：{'code': '10001', 'msg': '加标成功', 'status': 1, 'data': None}  -[test_E_add.py:61]
2019-02-26 17:03:50,714-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0}，实际结果是：{'code': '10001', 'msg': '加标成功', 'status': 1, 'data': None}  -[test_E_add.py:61]
2019-02-26 17:04:02,985-add-ERROR-:执行失败！期望结果是：{'msg': '成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '加标成功', 'status': 1, 'code': '10001', 'data': None}  -[test_E_add.py:61]
2019-02-26 17:04:03,162-add-ERROR-:执行失败！期望结果是：{'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0, 'code': '20106'}，实际结果是：{'msg': '加标成功', 'status': 1, 'code': '10001', 'data': None}  -[test_E_add.py:61]
2019-02-26 17:04:20,324-add-ERROR-:执行失败！期望结果是：{'msg': '成功', 'status': 1, 'code': '10001'}，实际结果是：{'data': None, 'msg': '加标成功', 'status': 1, 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 17:04:20,996-add-ERROR-:执行失败！期望结果是：{'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0, 'code': '20106'}，实际结果是：{'data': None, 'msg': '加标成功', 'status': 1, 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 17:05:14,600-add-ERROR-:执行失败！期望结果是：{'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0, 'code': '20106'}，实际结果是：{'data': None, 'msg': '加标成功', 'status': 1, 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 17:05:59,214-add-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '成功', 'code': '10001'}，实际结果是：{'status': 1, 'msg': '加标成功', 'data': None, 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 17:05:59,514-add-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106'}，实际结果是：{'status': 1, 'msg': '加标成功', 'data': None, 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 17:16:35,806-invest-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'msg': '该标可投金额不足，可投金额：297600.0', 'status': 0, 'data': None, 'code': '11012'}  -[test_G_invest.py:65]
2019-02-26 17:20:45,670-invest-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1}，实际结果是：{'msg': '该标不在竞标中状态，无法完成投标', 'code': '11010', 'data': None, 'status': 0}  -[test_G_invest.py:65]
2019-02-26 17:52:31,041-withdraw-ERROR-:执行失败！期望结果是：{'msg': '余额不足，请修改提现额度', 'code': '20119', 'status': 0}，实际结果是：{'data': {'type': '1', 'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'regtime': '2019-01-17 19:53:52.0', 'regname': 'huahua', 'leaveamount': '15507685.35', 'id': 1114837, 'mobilephone': '13539787045'}, 'msg': '取现成功', 'code': '10001', 'status': 1}  -[test_H_withdraw.py:57]
2019-02-26 17:54:12,299-withdraw-ERROR-:执行失败！期望结果是：{'code': '20119', 'status': 0, 'msg': '余额不足，请修改提现额度'}，实际结果是：{'data': None, 'code': '20117', 'status': 0, 'msg': '请输入范围在0到50万之间的正数金额'}  -[test_H_withdraw.py:57]
2019-02-26 17:54:35,833-invest-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'status': 0, 'data': None, 'msg': '参数错误：所有参数不能为空', 'code': '20203'}  -[test_G_invest.py:68]
2019-02-26 17:54:36,108-invest-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'status': 0, 'data': None, 'msg': '参数错误:所有参数都不能为空', 'code': '11003'}  -[test_G_invest.py:68]
2019-02-26 17:54:36,298-invest-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'status': 0, 'data': None, 'msg': '参数错误:所有参数都不能为空', 'code': '11003'}  -[test_G_invest.py:68]
2019-02-26 17:54:36,482-invest-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '请根据数值参数的类型对应输入合法的数字', 'code': '11013'}，实际结果是：{'status': 0, 'data': None, 'msg': '参数错误:所有参数都不能为空', 'code': '11003'}  -[test_G_invest.py:68]
2019-02-26 17:54:36,683-invest-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '11012'}，实际结果是：{'status': 0, 'data': None, 'msg': '参数错误:所有参数都不能为空', 'code': '11003'}  -[test_G_invest.py:68]
2019-02-26 17:54:36,856-invest-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'status': 0, 'data': None, 'msg': '参数错误:所有参数都不能为空', 'code': '11003'}  -[test_G_invest.py:68]
2019-02-26 17:54:37,034-invest-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '11010'}，实际结果是：{'status': 0, 'data': None, 'msg': '参数错误:所有参数都不能为空', 'code': '11003'}  -[test_G_invest.py:68]
2019-02-26 17:54:37,213-invest-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '不存在该用户', 'code': '11008'}，实际结果是：{'status': 0, 'data': None, 'msg': '参数错误:所有参数都不能为空', 'code': '11003'}  -[test_G_invest.py:68]
2019-02-26 17:54:37,393-invest-ERROR-:执行失败！期望结果是：{'code': ''}，实际结果是：{'status': 0, 'data': None, 'msg': '参数错误:所有参数都不能为空', 'code': '11003'}  -[test_G_invest.py:68]
2019-02-26 17:54:37,591-invest-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '密码错误', 'code': ''}，实际结果是：{'status': 0, 'data': None, 'msg': '参数错误:所有参数都不能为空', 'code': '11003'}  -[test_G_invest.py:68]
2019-02-26 17:54:37,964-invest-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '参数错误，投资金额必须能被 100整除的正整数', 'code': '11007'}，实际结果是：{'status': 0, 'data': None, 'msg': '参数错误:所有参数都不能为空', 'code': '11003'}  -[test_G_invest.py:68]
2019-02-26 17:54:38,155-invest-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '参数错误，投资金额必须能被 100整除的正整数', 'code': '11007'}，实际结果是：{'status': 0, 'data': None, 'msg': '参数错误:所有参数都不能为空', 'code': '11003'}  -[test_G_invest.py:68]
2019-02-26 17:54:38,545-invest-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '请根据数值参数的类型对应输入合法的数字', 'code': '11013'}，实际结果是：{'status': 0, 'data': None, 'msg': '参数错误:所有参数都不能为空', 'code': '11003'}  -[test_G_invest.py:68]
2019-02-26 18:16:14,131-invest-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'data': None, 'status': 1, 'msg': '竞标成功', 'code': '10001'}  -[test_G_invest.py:83]
2019-02-26 18:16:14,506-invest-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'data': None, 'status': 1, 'msg': '竞标成功', 'code': '10001'}  -[test_G_invest.py:83]
2019-02-26 18:16:15,242-invest-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'data': None, 'status': 1, 'msg': '竞标成功', 'code': '10001'}  -[test_G_invest.py:83]
2019-02-26 18:17:31,512-invest-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'status': 1, 'msg': '竞标成功', 'data': None, 'code': '10001'}  -[test_G_invest.py:83]
2019-02-26 18:17:31,905-invest-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'status': 1, 'msg': '竞标成功', 'data': None, 'code': '10001'}  -[test_G_invest.py:83]
2019-02-26 18:17:32,648-invest-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'status': 1, 'msg': '竞标成功', 'data': None, 'code': '10001'}  -[test_G_invest.py:83]
2019-02-26 18:31:00,623-withdraw-ERROR-:执行失败！期望结果是：{'msg': '手机号不能为空', 'code': '20103', 'status': 0}，实际结果是：{'msg': '抱歉，请先登录。', 'code': None, 'status': 0, 'data': None}  -[test_H_withdraw.py:55]
2019-02-26 18:32:08,194-withdraw-ERROR-:执行失败！期望结果是：{'status': 0, 'code': '20119', 'msg': '余额不足，请修改提现额度'}，实际结果是：{'data': None, 'status': 0, 'code': '20117', 'msg': '请输入范围在0到50万之间的正数金额'}  -[test_H_withdraw.py:57]
2019-02-26 18:37:28,362-withdraw-ERROR-:执行失败！期望结果是：{'code': '20117', 'msg': '请输入范围在0到50万之间的正数金额', 'status': 0}，实际结果是：{'data': None, 'code': '20119', 'msg': '余额不足，请修改提现额度', 'status': 1}  -[test_H_withdraw.py:57]
2019-02-26 18:42:43,992-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '成功'}，实际结果是：{'code': '10001', 'data': None, 'status': 1, 'msg': '加标成功'}  -[test_E_add.py:61]
2019-02-26 18:42:44,177-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 '}，实际结果是：{'code': '10001', 'data': None, 'status': 1, 'msg': '加标成功'}  -[test_E_add.py:61]
2019-02-26 19:59:56,837-add-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106'}，实际结果是：{'status': 1, 'msg': '加标成功', 'data': None, 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 20:00:04,363-invest-ERROR-:执行失败！期望结果是：{'status': 1, 'code': '10001'}，实际结果是：{'status': 1, 'msg': '竞标成功', 'data': None, 'code': '10001'}  -[test_G_invest.py:83]
2019-02-26 20:00:11,005-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '提现成功', 'code': '10001'}，实际结果是：{'status': 1, 'msg': '余额不足，请修改提现额度', 'data': None, 'code': '20119'}  -[test_H_withdraw.py:57]
2019-02-26 20:00:11,468-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '提现成功', 'code': '10001'}，实际结果是：{'status': 1, 'msg': '余额不足，请修改提现额度', 'data': None, 'code': '20119'}  -[test_H_withdraw.py:57]
2019-02-26 20:00:11,946-withdraw-ERROR-:执行失败！期望结果是：{'status': 1, 'msg': '提现成功', 'code': '10001'}，实际结果是：{'status': 1, 'msg': '余额不足，请修改提现额度', 'data': None, 'code': '20119'}  -[test_H_withdraw.py:57]
2019-02-26 20:05:51,462-add-ERROR-:执行失败！期望结果是：{'msg': '成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '加标成功', 'status': 1, 'data': None, 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 20:05:52,516-add-ERROR-:执行失败！期望结果是：{'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0, 'code': '20106'}，实际结果是：{'msg': '加标成功', 'status': 1, 'data': None, 'code': '10001'}  -[test_E_add.py:61]
2019-02-26 20:06:07,139-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'status': 1, 'data': None, 'code': '20119'}  -[test_H_withdraw.py:57]
2019-02-26 20:06:07,603-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'status': 1, 'data': None, 'code': '20119'}  -[test_H_withdraw.py:57]
2019-02-26 20:06:08,073-withdraw-ERROR-:执行失败！期望结果是：{'msg': '提现成功', 'status': 1, 'code': '10001'}，实际结果是：{'msg': '余额不足，请修改提现额度', 'status': 1, 'data': None, 'code': '20119'}  -[test_H_withdraw.py:57]
2019-02-26 20:11:03,965-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'msg': '成功', 'status': 1}，实际结果是：{'code': '10001', 'data': None, 'status': 1, 'msg': '加标成功'}  -[test_E_add.py:61]
2019-02-26 20:11:04,151-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'status': 0}，实际结果是：{'code': '10001', 'data': None, 'status': 1, 'msg': '加标成功'}  -[test_E_add.py:61]
2019-02-26 20:11:23,172-withdraw-ERROR-:执行失败！期望结果是：{'code': '20119', 'msg': '余额不足，请修改提现额度', 'status': 0}，实际结果是：{'code': '10001', 'data': {'type': '1', 'mobilephone': '13539787045', 'regname': 'huahua', 'regtime': '2019-01-17 19:53:52.0', 'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'id': 1114837, 'leaveamount': '783228.60'}, 'status': 1, 'msg': '取现成功'}  -[test_H_withdraw.py:57]
2019-02-26 20:13:56,081-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 '}，实际结果是：{'data': None, 'code': '10001', 'status': 1, 'msg': '加标成功'}  -[test_E_add.py:61]
2019-02-26 20:14:14,977-withdraw-ERROR-:执行失败！期望结果是：{'code': '20119', 'status': 0, 'msg': '余额不足，请修改提现额度'}，实际结果是：{'data': {'regtime': '2019-01-17 19:53:52.0', 'type': '1', 'leaveamount': '633098.60', 'regname': 'huahua', 'pwd': '4B63973E4281D3B2318C2EA1F7FFC861', 'id': 1114837, 'mobilephone': '13539787045'}, 'code': '10001', 'status': 1, 'msg': '取现成功'}  -[test_H_withdraw.py:57]
2019-02-26 20:16:22,047-add-ERROR-:执行失败！期望结果是：{'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 ', 'code': '20106'}，实际结果是：{'status': 1, 'msg': '加标成功', 'code': '10001', 'data': None}  -[test_E_add.py:61]
2019-02-26 21:07:22,976-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '成功'}，实际结果是：{'code': '10001', 'status': 1, 'msg': '加标成功', 'data': None}  -[test_E_add.py:61]
2019-02-26 21:07:23,408-add-ERROR-:执行失败！期望结果是：{'code': '10001', 'status': 1, 'msg': '成功'}，实际结果是：{'code': '10001', 'status': 1, 'msg': '加标成功', 'data': None}  -[test_E_add.py:61]
2019-02-26 21:07:23,617-add-ERROR-:执行失败！期望结果是：{'code': '20106', 'status': 0, 'msg': '借款金额 amount 必须为 大于 1000 并能被 100 整除的正整数 '}，实际结果是：{'code': '10001', 'status': 1, 'msg': '加标成功', 'data': None}  -[test_E_add.py:61]
